services:
  web:
    build: .
    command:
      - sh
      - -c
      - |
        ./wait-for-it.sh db:5432 -- \
        && python manage.py migrate --noinput \
        && python manage.py collectstatic --noinput \
        && python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
      - ./scripts/wait-for-it.sh:/app/wait-for-it.sh
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=lost_and_found
      - POSTGRES_USER=asset01
      - POSTGRES_PASSWORD=piko0101m
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=piko0101m

  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    environment:
      - POSTGRES_DB=lost_and_found
      - POSTGRES_USER=asset01
      - POSTGRES_PASSWORD=piko0101m
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U asset01 -d lost_and_found"]
      interval: 5s
      timeout: 5s
      retries: 5

  minio:
    image: minio/minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=piko0101m

    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - app-network
    ports:
      - "9000:9000"
      - "9001:9001"

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - static_volume:/app/static
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - web
    networks:
      - app-network

volumes:
  postgres_data:
  minio_data:
  static_volume:

networks:
  app-network:
    driver: bridge
